//========================================================================== //
// Copyright (c) 2022, Stephen Henry
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//========================================================================== //

start: (directive | instruction | label)*

// ------------------------------------------------------------------------- //
//
directive: ".org" INTEGER -> org

// ------------------------------------------------------------------------- //
//
?link: /[_a-z]+/

label: link ":" -> label

// ------------------------------------------------------------------------- //
//
instruction: /j(eq|gt|le)?/ link -> jump
           | "push" reg -> push
           | "pop" reg -> pop
           | "ld" reg "," "[" reg "]" -> ld
           | "st" "[" reg "]" "," reg -> st
           | "mov" reg "," (reg | INTEGER) -> mov
           | "movs" (reg | sreg) "," (reg | sreg) -> movs
           | "sub" reg "," reg "," (reg | INTEGER) -> sub
           | "add" reg "," reg "," (reg | INTEGER) -> add
           | "emit" -> emit
           | "wait" -> wait
           | "ret" -> ret
           | "call" link -> call
           | "cmp" reg "," reg -> cmp

?reg: (/(x|r)[0-9]+/ | BLINK)

?sreg: NREG

BLINK: "blink"
NREG: "N" 

// ------------------------------------------------------------------------- //
//

%import common.WS
%import common.INT -> INTEGER
%ignore WS
%ignore ";" /.*\n?/

// EOF
